 tovacuum and vacuum ran on tables
-----------------------------------

	- SELECT relname, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze FROM pg_stat_user_tables where relname = 'table1';

Check open transactions
------------------------


Check SSL connection for current user
-------------------------------------

	- select * from pg_stat_ssl where pid = pg_backend_pid();


Size of DB + table
----------------------------------

SELECT pg_size_pretty( pg_database_size('dbname') );

SELECT pg_size_pretty( pg_total_relation_size('tablename') );

Improting into APG from S3
----------------------------------

<<--------------------------------------------------->>

	- select aws_s3.table_import_from_s3 ( 
'student', 
'', 
'format csv', 
aws_commons.create_s3_uri('itx-agj-cons-discovery-aurora', 'test.csv', 'us-east-1'), 
aws_commons.create_aws_credentials('sample_access_key', 'sample_secret_key', '') 
);

Grant to nonsuper user:

GRANT ALL ON SCHEMA aws_commons TO username;
GRANT ALL ON SCHEMA aws_s3 TO username;

GRANT EXECUTE ON FUNCTION aws_s3.table_import_from_s3(text, text, text, text, text, text, text, text, text) TO username;
GRANT EXECUTE ON FUNCTION aws_s3.table_import_from_s3(text, text, text, aws_commons._s3_uri_1, aws_commons._aws_credentials_1) TO username;

GRANT SELECT, INSERT, UPDATE, DELETE ON table-name TO username;


IAM Auth
----------------------

Create token:
export PGPASSWORD="$(aws rds generate-db-auth-token --hostname=xxxxxxx.cpwcfjiz0vvs.eu-west-1.rds.amazonaws.com --port 5432 --username egis)"

Connect to DB:
 psql -h xxxxx.cpwcfjiz0vvs.eu-west-1.rds.amazonaws.com -p 5432 "dbname=pg user=egis sslrootcert=rds-combined-ca-bundle.pem sslmode=verify-full"
 
 
 Kill long idle running queries
 ----------------------
 select pg_terminate_backend(pid), 
       usename, pid, datname, state,
       wait_event, now() as dttm,
       state_change, xact_start,
       query_start, query
  FROM pg_stat_activity 
 WHERE now() - state_change > '5 minutes'::interval 
  AND state = 'idle';
  


Check for orphaned files in PG
----------------------
SELECT pg_size_pretty(pg_database_size('basedata'));


SELECT pg_size_pretty(SUM(pg_relation_size(oid))) FROM pg_class;



SELECT pg_size_pretty(sum(pg_total_relation_size(oid))) FROM pg_class WHERE relkind IN ('r','m','S') AND NOT relisshared;


SELECT pg_size_pretty(sum(pg_total_relation_size(oid))) FROM pg_class WHERE relkind IN ('r','m','S') AND NOT relisshared;



SELECT pg_size_pretty(sum(pg_total_relation_size(oid))) FROM pg_class WHERE relkind IN ('r','m','S','i','t') AND NOT relisshared;



SELECT pg_size_pretty(total_size_bytes) AS total_file_size
        , pg_size_pretty(real_size_bytes) AS real_size
        , pg_size_pretty(total_size_bytes-real_size_bytes) AS difference
        , (total_size_bytes-real_size_bytes) AS difference_bytes
    FROM ( SELECT pg_database_size(current_database()) AS total_size_bytes
                 , sum(pg_relation_size(oid)) AS real_size_bytes
             FROM pg_class) s
